////////////////////////////////////////////////////////////////////////////////////////
//
// Gary Muller, Ian Powers
// Spring 2016
// CS 303 Network Security (Crypto)
//
// Copyright 2016 Gary Muller, Ian Powers
//
////////////////////////////////////////////////////////////////////////////////////////
// An implementation of the Diffie-Hellman key exchange protocol, for our semester 
// project
////////////////////////////////////////////////////////////////////////////////////////


//Header files - Standard libraries and classes
#ifndef CORE_DEPENDENCIES_H_
//OS Specific Includes
	#ifdef __linux__ 
	//linux specific includes
	#elif _WIN32
	// windows specific includes
	#endif


//standard library includes
#include <iostream> //default include for functionality
#include <string> //get extended string functionality
#include <math.h> //get math functionality for large numbers and complex stuff
#include "key_party.h" //class for Alice and Bob objects
#endif
////


//Global variables and defines

////


//Function Prototypes
unsigned long findPrime();
////


////////////////////////////////////////////////////////////////////////////////////////
//
//Main Declaration
//
////////////////////////////////////////////////////////////////////////////////////////

int main()
{
	//get two primes
	
	//alice and bob must share the primes

	//they each add their secret sauce

	//compute mod

	//share results

	//add their secret sauce again (the others results)

	//compute mod

	//
}

////////////////////////////////////////////////////////////////////////////////////////
//
//Function Declarations
//
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
//Find Prime
////////////////////////////////////////////////////////////////////////////////////////
unsigned long findPrime()
{
	while (true)
	{
		int r = rand();
		if (r == isPrime())
			return 
	}
}


////////////////////////////////////////////////////////////////////////////////////////
//Function 2
////////////////////////////////////////////////////////////////////////////////////////